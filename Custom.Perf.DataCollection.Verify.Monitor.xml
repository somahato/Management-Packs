<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Custom.Perf.DataCollection.Verify.Monitor</ID>
      <Version>1.0.0.3</Version>
    </Identity>
    <Name>Custom.Perf.DataCollection.Verify.Monitor</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8443.6</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Custom.PerfDataCollection.Verify.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Custom.PerfDataCollection.Verify.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Describe Script Here
#
#  Author:  Sourav Mahato
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Custom.PerfDataMonitor.ps1"
$EventID = "7890"
$DatabaseName = 'OperationsManager'
$Instancename = 'SQL2016'

# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API


Function Get-SQLTable($Instancename, $DatabaseName, $strSQLCommand, $intSQLTimeout = 300)
{	
	trap [System.Exception]
	{
		Write-Host "Exception trapped, $($_.Exception.Message)"
		Write-Host "SQL Command Failed.  Sql Server [$Instancename], Sql Database [$DatabaseName], Sql Command [$strSQLCommand]."
    $momapi.LogScriptEvent($Instancename,$EventID,2,"`n SQL Command Failed.  Sql Server [$Instancename], Sql Database [$DatabaseName], Sql Command [$strSQLCommand] `n Running as ($whoami).")
		continue;
	}
	
	#build SQL Server connect string
	$strSQLConnect = "Server=$Instancename;Database=$DatabaseName;Integrated Security=True;Connection Timeout=$intSQLTimeout" 
	
	#connect to server and recieve dataset
	$objSQLConnection = New-Object System.Data.SQLClient.SQLConnection
	$objSQLConnection.ConnectionString =  $strSQLConnect
	$objSQLCmd = New-Object System.Data.SQLClient.SQLCommand
	$objSQLCmd.CommandTimeout = $intSQLTimeout
	$objSQLCmd.CommandText = $strSQLCommand
	$objSQLCmd.Connection = $objSQLConnection
	$objSQLAdapter = New-Object System.Data.SQLClient.SQLDataAdapter
	$objSQLAdapter.SelectCommand = $objSQLCmd
	$objDataSet = New-Object System.Data.DataSet
	$strRowCount = $objSQLAdapter.Fill($objDataSet)
	
	If ($?)
	{
		#pull out table
		$objTable = $objDataSet.tables[0]
    
    
	}
	
	#close the SQL connection
	$objSQLConnection.Close()
	
	#return array of values to caller	
	return $objTable
}


$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
#$momapi.LogScriptEvent($ComputerName,$EventID,0,"`n $DatabaseName is starting. `n Running as ($whoami).")
$bag = $momapi.CreatePropertyBag()

$strSQLCommand = "DECLARE @PerfData TABLE(Name varchar(255),[LastSample] datetime, Status varchar(255))

Insert Into @PerfData
select ME.Path  As 'Name', CAST(Max(TimeSampled) As nvarchar(50)) As 'LastSample', CASE WHEN Isnull(MAX(TimeSampled),'01-01-80') &lt; DateAdd(hh,-4,getutcdate()) Then 'BAD' Else 'GOOD'
END as 'Status'
from dbo.ManagedEntityGenericView ME
inner join dbo.ManagedTypeView MT on ME.MonitoringClassId=MT.Id
inner join dbo.PerformanceCounterView C on ME.Id = C.ManagedEntityId
left join dbo.PerformanceDataAllView P on C.PerformanceSourceInternalId=P.PerformanceSourceInternalId
where MT.Name like '%Windows%'
   OR MT.Name like '%UNIX%'
and ME.IsDeleted=0
group by ME.Path
order by Status Asc
Select * from @PerfData where Status like 'BAD'"

$Result = Get-SqlTable $Instancename $DatabaseName $strSQLCommand

$ServerName = $Result.Name
$momapi.LogScriptEvent($ScriptName,$EventID,1,"`n Performance data is not collected for $ServerName")
$Status = $Result.Status
$Count = $Result.Name.Count

If ($Count -gt 0)
{
    if ($Status -like "BAD")
    {

    #$variable = "$Status"
    $bag.AddValue("Count",$Count)
    $bag.AddValue("Instancename",$Instancename)
    $bag.AddValue("DatabaseName",$DatabaseName)
    $bag.AddValue("Status",'BadCondition')
    $bag
    $momapi.Return($bag)
    }
}
    else

    {

    #$variable = "$Status"
    $bag.AddValue("Count",$Count)
    $bag.AddValue("Instancename",$Instancename)
    $bag.AddValue("DatabaseName",$DatabaseName)
    $bag.AddValue('Status','GoodCondition')
    $bag
    $momapi.Return($bag)
    }

# Return all bags



# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
#$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Custom.PerfDataCollection.Verify.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Custom.PerfDataCollection.Verify.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Custom.PerfDataCollection.Verify.Monitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Custom.PerfDataCollection.Verify.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.PerfDataCollection.Verify.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>43200</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Custom.PerfDataCollection.Verify.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Custom.PerfDataCollection.Verify.Monitor">
          <Name>Custom PerfDataCollection Verify Monitor</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Custom.PerfDataCollection.Verify.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.PerfDataCollection.Verify.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.PerfDataCollection.Verify.Monitor.AlertMessage">
          <Name>Custom PerfDataCollection Verify Monitor: Failure</Name>
          <Description>Custom PerfDataCollection Verify Monitor: detected a bad condition

Please run the below SQL query against the OperationsManager database to get the server details. Please also check event ID 7890 for more details.

select ME.Path  As 'Name',
CAST(Max(TimeSampled) As nvarchar(50)) As 'LastSample',
CASE
       -- The number 4 is the hour passed from last sample collection we wait before marking the server as  BAD or OGOOD.
       -- BAD should be for problematic servers
       -- GOOD should be for working servers
       WHEN Isnull(MAX(TimeSampled),'01-01-80') &lt; DateAdd(hh,-4,getutcdate()) Then 'BAD'
       Else 'GOOD'
END as 'Status'
from dbo.ManagedEntityGenericView ME
inner join dbo.ManagedTypeView MT on ME.MonitoringClassId=MT.Id
inner join dbo.PerformanceCounterView C on ME.Id = C.ManagedEntityId
left join dbo.PerformanceDataAllView P on C.PerformanceSourceInternalId=P.PerformanceSourceInternalId
where MT.Name like '%Linux%'
   OR MT.Name like '%UNIX%'
and ME.IsDeleted=0
group by ME.Path
order by Status</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>
