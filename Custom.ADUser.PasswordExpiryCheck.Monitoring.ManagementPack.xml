<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Custom.ADUser.PasswordExpiryCheck.Monitoring.ManagementPack</ID>
      <Version>1.0.0.1</Version>
    </Identity>
    <Name>Custom.ADUser.PasswordExpiryCheck.Monitoring.ManagementPack</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8443.6</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="Age" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="ComputerName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Age" Selector="$Config/Age$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Custom.ADuser.PasswordExpiryCheck.Monitor.ps1</ScriptName>
                <ScriptBody>
param([string]$ComputerName,$Age)				
#=================================================================================
#  Describe Script Here
#
#  Author: Sourav Mahato 
#  v1.0


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Custom.ADuser.PasswordExpiryCheck.Monitor.ps1"
$EventID = "7890"
#$ComputerName = 'sql2017.lab.com'
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Log script parameters we received
#$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript parameters passed into datasource: `nComputerName: ($ComputerName).")

$PWDTime = (get-aduser krbtgt -properties PasswordLastset).Passwordlastset
$WarnDate = (get-date).Date
$Diff = $WarnDate - $PWDTime
$DiffDays = $Diff.Days
$AgeDays = "$DiffDays Days"
$AccountName = "krbtgt"
$condition = '' 

if ($DiffDays -gt $Age)
{

#$State = "True"
$condition = 'BadCondition'
#Write-Host "Password Age for account has exceeded 200 days and need to be changes as early as possible"
##Generate Clear Custom Event##
$MessageBody = "Password Age for account has exceeded 200 days and need to be changes as early as possible"
$domain = $(get-addomain).NetBIOSName
$NewEventMessage = @"
AccountName: "krbtgt"
PWDLastSet : $PWDTime
Domain: $domain
General: $MessageBody

$EventDataFormatted
"@ 

#"$($event.TimeStamp)`n$NewEventMessage "

#New-EventLog -LogName Application -Source "NTRS-Audit" -ErrorAction SilentlyContinue
#Write-EventLog –LogName Application –Source “NTRS-Audit” –EntryType Information –EventID 6791 –Message $NewEventMessage
}

else 
{
#$State =$false
$condition = 'GoodCondition'
#Write-Output "Password Age for account has not exceeded 200 day"
$domain = $(get-addomain).NetBIOSName
$NewEventMessage = @"
AccountName: "krbtgt"
PWDLastSet : $PWDTime
Domain: $domain
General: $MessageBody
 

$EventDataFormatted
"@
 
#"$($event.TimeStamp)`n$NewEventMessage " 

#New-EventLog -LogName Application -Source "NTRS-Audit" -ErrorAction SilentlyContinue
#Write-EventLog –LogName Application –Source “NTRS-Audit” –EntryType Warning –EventID 6793 –Message $NewEventMessage
}  

  $bag = $momApi.CreatePropertyBag()
  #$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nHealthy:  The Service called $Service.Name is in $Service.State State.")
  $bag.AddValue('ComputerName',$ComputerName)
  $bag.AddValue('Result',$condition)
  $bag.Addvalue('AccountName',$AccountName) 
  $bag.AddValue('PWDLastSet',$PWDTime)
  $bag.AddValue('domain',$domain)
  $bag.AddValue('PasswordExipred',$DiffDays)
  
  $bag

  #$momapi.Return($bag)
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>Age</Name>
                    <Value>$Config/Age$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Config/ComputerName$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="Age" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="ComputerName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MatchCount" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Age" Selector="$Config/Age$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="MatchCount" Selector="$Config/MatchCount$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <Age>$Config/Age$</Age>
              <ComputerName>$Config/ComputerName$</ComputerName>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/MatchCount$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Result']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='PasswordExipred']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='AccountName']$</AlertParameter3>
            <AlertParameter4>$Data/Context/Property[@Name='PWDLastSet']$</AlertParameter4>
            <AlertParameter5>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</AlertParameter5>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <Age>200</Age>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <TimeoutSeconds>120</TimeoutSeconds>
          <MatchCount>1</MatchCount>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor">
          <Name>Custom ADUserPasswordExpiryCheck Availability Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.ADUserPasswordExpiryCheck.Availability.Monitor.AlertMessage">
          <Name>Custom ADUserPasswordExpiryCheck Availability Monitor: Failure</Name>
          <Description>Password has been exceeded 200 days for The AD Account {2}, Password was changed on {3}; Need to be changed as early as possible.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>