<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Microsoft.SQLServer.DatabaseStatus.ManagementPack</ID>
      <Version>1.0.0.4</Version>
    </Identity>
    <Name>Microsoft.SQLServer.DatabaseStatus.ManagementPack</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSCL">
        <ID>Microsoft.SQLServer.Core.Library</ID>
        <Version>7.0.20.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSWD">
        <ID>Microsoft.SQLServer.Windows.Discovery</ID>
        <Version>7.0.20.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Custom.SQLServer.DatabaseStatus.Monitor.DS" Accessibility="Internal" RunAs="MSCL!Microsoft.SQLServer.Core.RunAs.Monitoring" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="Computername" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="DatabaseName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="Instancename" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Computername" Selector="$Config/Computername$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Custom.SQLServer.DatabaseStatus.Monitor.DS.ps1</ScriptName>
                <ScriptBody>
param([string]$ComputerName,[string]$DatabaseName,[string]$Instancename)


#=================================================================================
#  Describe Script Here
#
#  Author:  Sourav Mahato
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Custom.SQLServer.DatabaseStatus.Monitor.DS.ps1"
$EventID = "7890"


# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API


Function Get-SQLTable($ComputerName, $DatabaseName, $strSQLCommand, $intSQLTimeout = 60)
{	
	trap [System.Exception]
	{
		Write-Host "Exception trapped, $($_.Exception.Message)"
		Write-Host "SQL Command Failed.  Sql Server [$ComputerName], Sql Database [$DatabaseName], Sql Command [$strSQLCommand]."
    $momapi.LogScriptEvent($ComputerName,$EventID,2,"`n SQL Command Failed.  Sql Server [$ComputerName], Sql Database [$DatabaseName], SQL Instance $Instancename Sql Command [$strSQLCommand] `n Running as ($whoami).")
		continue;
	}
	
	#build SQL Server connect string
	$strSQLConnect = "Server=$ComputerName;Database=$DatabaseName;Integrated Security=True;Connection Timeout=$intSQLTimeout" 
	
	#connect to server and recieve dataset
	$objSQLConnection = New-Object System.Data.SQLClient.SQLConnection
	$objSQLConnection.ConnectionString =  $strSQLConnect
	$objSQLCmd = New-Object System.Data.SQLClient.SQLCommand
	$objSQLCmd.CommandTimeout = $intSQLTimeout
	$objSQLCmd.CommandText = $strSQLCommand
	$objSQLCmd.Connection = $objSQLConnection
	$objSQLAdapter = New-Object System.Data.SQLClient.SQLDataAdapter
	$objSQLAdapter.SelectCommand = $objSQLCmd
	$objDataSet = New-Object System.Data.DataSet
	$strRowCount = $objSQLAdapter.Fill($objDataSet)
	
	If ($?)
	{
		#pull out table
		$objTable = $objDataSet.tables[0]
    
    
	}
	
	#close the SQL connection
	$objSQLConnection.Close()
	
	#return array of values to caller	
	return $objTable
}


$Database = 'master'
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
#$momapi.LogScriptEvent($ComputerName,$EventID,0,"`n $DatabaseName is starting. `n Running as ($whoami).")
$bag = $momapi.CreatePropertyBag()

If ($Instancename -like 'MSSQLSERVER')

{

$strSQLCommand = "SELECT name,d.state_desc from  sys.databases d with (nolock)
LEFT OUTER JOIN sys.database_mirroring dm with (nolock) ON dm.database_id = d.database_id AND dm.mirroring_role = 2
where (d.state_desc = 'Emergency' or d.state_desc = 'Suspect' or d.state_desc = 'Online' or d.state_desc = 'Recovery_pending' or d.state_desc = 'Recovering' or
d.state_desc = 'Restoring' or d.state_desc = 'Offline') and name = '$DatabaseName'"

$Result = Get-SqlTable $ComputerName $Database $strSQLCommand

$Status = $Result.state_desc

#$momapi.LogScriptEvent($ScriptName,$EventID,0,"SQL Server $ComputerName and Instance $Instancename having $DatabaseName status is $Status")

#"$SQLDB status is $Status" &gt;&gt;"C:\Temp\SQL.txt"


if ($Status -eq "Online" -or $Status -eq "Offline")
{

#$variable = "$Status"

$bag.AddValue('ComputerName',$ComputerName)
$bag.AddValue('Instancename',$Instancename)
$bag.AddValue('Database',$DatabaseName)
$bag.AddValue('Status','GoodCondition')
$bag.AddValue('DatabaseState',$Status)

}

else

{

#$variable = "$Status"

$bag.AddValue('ComputerName',$ComputerName)
$bag.AddValue('Instancename',$Instancename)
$bag.AddValue('Database',$DatabaseName)
$bag.AddValue('Status','BadCondition')
$bag.AddValue('DatabaseState',$Status)

}
}
Else
{
$SQLServer = "$ComputerName" + '\' + "$Instancename"

$strSQLCommand = "SELECT name,d.state_desc from  sys.databases d with (nolock)
LEFT OUTER JOIN sys.database_mirroring dm with (nolock) ON dm.database_id = d.database_id AND dm.mirroring_role = 2
where (d.state_desc = 'Emergency' or d.state_desc = 'Suspect' or d.state_desc = 'Online' or d.state_desc = 'Recovery_pending' or d.state_desc = 'Recovering' or
d.state_desc = 'Restoring' or d.state_desc = 'Offline') and name = '$DatabaseName'"

$Result = Get-SqlTable $SQLServer $Database $strSQLCommand

$Status = $Result.state_desc

#$momapi.LogScriptEvent($ScriptName,$EventID,0,"SQL Server $SQLServer and Instance $Instancename having $DatabaseName status is $Status")

#"$SQLDB status is $Status" &gt;&gt;"C:\Temp\SQL.txt"

if ($Status -eq "Online" -or $Status -eq "Offline")
{

#$variable = "$Status"

$bag.AddValue('ComputerName',$ComputerName)
$bag.AddValue('Instancename',$Instancename)
$bag.AddValue('Database',$DatabaseName)
$bag.AddValue('Status',"GoodCondition")
$bag.AddValue('DatabaseState',$Status)

}

else

{

#$variable = "$Status"

$bag.AddValue('ComputerName',$ComputerName)
$bag.AddValue('Instancename',$Instancename)
$bag.AddValue('Database',$DatabaseName)
$bag.AddValue('Status','BadCondition')
$bag.AddValue('DatabaseState',$Status)
}
}
# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
#$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>Computername</Name>
                    <Value>$Config/Computername$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DatabaseName</Name>
                    <Value>$Config/DatabaseName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Instancename</Name>
                    <Value>$Config/Instancename$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Custom.SQLServer.DatabaseStatus.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="Computername" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="DatabaseName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="Instancename" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MatchCount" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Computername" Selector="$Config/Computername$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="MatchCount" Selector="$Config/MatchCount$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Custom.SQLServer.DatabaseStatus.Monitor.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <Computername>$Config/Computername$</Computername>
              <DatabaseName>$Config/DatabaseName$</DatabaseName>
              <Instancename>$Config/Instancename$</Instancename>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/MatchCount$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Custom.SQLServer.DatabaseStatus.Monitor" Accessibility="Public" Enabled="false" Target="MSWD!Microsoft.SQLServer.Windows.Database" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Custom.SQLServer.DatabaseStatus.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Custom.SQLServer.DatabaseStatus.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Host/Property[Type="MSCL!Microsoft.SQLServer.Core.DBEngine"]/MachineName$</AlertParameter1>
            <AlertParameter2>$Target/Property[Type="MSCL!Microsoft.SQLServer.Core.Database"]/DatabaseName$</AlertParameter2>
            <AlertParameter3>$Target/Host/Property[Type="MSCL!Microsoft.SQLServer.Core.DBEngine"]/InstanceName$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <Computername>$Target/Host/Property[Type="MSCL!Microsoft.SQLServer.Core.DBEngine"]/MachineName$</Computername>
          <DatabaseName>$Target/Property[Type="MSCL!Microsoft.SQLServer.Core.Database"]/DatabaseName$</DatabaseName>
          <Instancename>$Target/Host/Property[Type="MSCL!Microsoft.SQLServer.Core.DBEngine"]/InstanceName$</Instancename>
          <TimeoutSeconds>120</TimeoutSeconds>
          <MatchCount>2</MatchCount>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Custom.SQLServer.DatabaseStatus.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Custom.SQLServer.DatabaseStatus.Monitor">
          <Name>Custom SQLServer DatabaseStatus Monitor</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Custom.SQLServer.DatabaseStatus.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.SQLServer.DatabaseStatus.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Custom.SQLServer.DatabaseStatus.Monitor.AlertMessage">
          <Name>SQL Server Database State Failure</Name>
          <Description>SQL Server {0} having Database called {1} in the Instance {2} is in Suspect/Recovery Mode Or account might not have access.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>
